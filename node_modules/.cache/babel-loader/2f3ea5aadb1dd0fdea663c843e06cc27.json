{"ast":null,"code":"import { firestore } from \"./../../firebase/utils\";\nexport const handleAddProduct = product => {\n  return new Promise((resolve, reject) => {\n    firestore.collection(\"products\").doc().set(product).then(() => {\n      resolve();\n    }).catch(err => {\n      reject(err);\n    });\n  });\n};\nexport const handleFetchProducts = ({\n  filterType,\n  startAfterDoc,\n  persistProducts = []\n}) => {\n  return new Promise((resolve, reject) => {\n    const pageSize = 6;\n    let ref = firestore.collection(\"products\").orderBy(\"createdDate\").limit(pageSize);\n    if (filterType) ref = ref.where(\"categoryId\", \"==\", filterType);\n    if (startAfterDoc) ref = ref.startAfter(startAfterDoc);\n    ref.get().then(snapshot => {\n      const totalCount = snapshot.size;\n      const data = [...persistProducts, ...snapshot.docs.map(doc => {\n        return { ...doc.data(),\n          documentID: doc.id\n        };\n      })];\n      resolve({\n        data,\n        queryDoc: snapshot.docs[totalCount - 1],\n        isLastPage: totalCount < 1\n      });\n    }).catch(err => {\n      reject(err);\n    });\n  });\n};\nexport const handleDeleteProduct = documentID => {\n  return new Promise((resolve, reject) => {\n    firestore.collection(\"products\").doc(documentID).delete().then(() => {\n      console.log(documentID, 2);\n      resolve();\n    }).catch(err => {\n      reject(err);\n    });\n  });\n};\nexport const handleFetchProduct = productID => {\n  return new Promise((resolve, reject) => {\n    firestore.collection(\"products\").doc(productID).get().then(snapshot => {\n      if (snapshot.exists) {\n        resolve({ ...snapshot.data(),\n          documentID: productID\n        });\n      }\n    }).catch(err => {\n      reject(err);\n    });\n  });\n};","map":{"version":3,"sources":["/Users/volkanerdemli/Desktop/online_project_web_fe/src/redux/Products/products.helpers.js"],"names":["firestore","handleAddProduct","product","Promise","resolve","reject","collection","doc","set","then","catch","err","handleFetchProducts","filterType","startAfterDoc","persistProducts","pageSize","ref","orderBy","limit","where","startAfter","get","snapshot","totalCount","size","data","docs","map","documentID","id","queryDoc","isLastPage","handleDeleteProduct","delete","console","log","handleFetchProduct","productID","exists"],"mappings":"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","sourcesContent":["import {firestore} from \"./../../firebase/utils\"\n\nexport const handleAddProduct = (product) => {\n  return new Promise((resolve, reject) => {\n    firestore\n      .collection(\"products\")\n      .doc()\n      .set(product)\n      .then(() => {\n        resolve()\n      })\n      .catch((err) => {\n        reject(err)\n      })\n  })\n}\n\nexport const handleFetchProducts = ({\n  filterType,\n  startAfterDoc,\n  persistProducts = [],\n}) => {\n  return new Promise((resolve, reject) => {\n    const pageSize = 6\n\n    let ref = firestore\n      .collection(\"products\")\n      .orderBy(\"createdDate\")\n      .limit(pageSize)\n\n    if (filterType) ref = ref.where(\"categoryId\", \"==\", filterType)\n    if (startAfterDoc) ref = ref.startAfter(startAfterDoc)\n\n    ref\n      .get()\n      .then((snapshot) => {\n        const totalCount = snapshot.size\n\n        const data = [\n          ...persistProducts,\n          ...snapshot.docs.map((doc) => {\n            return {\n              ...doc.data(),\n              documentID: doc.id,\n            }\n          }),\n        ]\n\n        resolve({\n          data,\n          queryDoc: snapshot.docs[totalCount - 1],\n          isLastPage: totalCount < 1,\n        })\n      })\n      .catch((err) => {\n        reject(err)\n      })\n  })\n}\n\nexport const handleDeleteProduct = (documentID) => {\n  return new Promise((resolve, reject) => {\n    firestore\n      .collection(\"products\")\n      .doc(documentID)\n      .delete()\n      .then(() => {\n        console.log(documentID, 2)\n        resolve()\n      })\n      .catch((err) => {\n        reject(err)\n      })\n  })\n}\n\nexport const handleFetchProduct = (productID) => {\n  return new Promise((resolve, reject) => {\n    firestore\n      .collection(\"products\")\n      .doc(productID)\n      .get()\n      .then((snapshot) => {\n        if (snapshot.exists) {\n          resolve({\n            ...snapshot.data(),\n            documentID: productID,\n          })\n        }\n      })\n      .catch((err) => {\n        reject(err)\n      })\n  })\n}\n"]},"metadata":{},"sourceType":"module"}